// Code generated by go-bindata. DO NOT EDIT.
// sources:
// res/DiscordPTB.lnk (1.945kB)

package assets

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _discordptbLnk = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x95\x4f\x68\x23\x55\x1c\xc7\x3f\xb1\xad\xb5\x17\x89\x18\xa4\x7f\xac\x8d\xd8\x88\x28\x33\x99\x49\xd2\x92\x06\x84\xb6\xf9\x63\x42\xa7\x26\x24\x0d\xa4\x30\x6a\x87\x64\xa0\xc1\xd4\x4c\x66\xa6\x90\x2a\x14\xc1\x43\x41\xac\x17\x2f\x22\x48\x8b\x08\x55\xd0\x83\x17\x05\x95\x52\xf0\xe0\x4d\xaa\x56\xf1\xe0\xa1\x15\x44\x11\x44\xb0\x97\x5d\xd8\x65\x97\x99\x24\x4b\xd3\x4d\xe9\x65\x2f\xbb\xec\xf7\xf1\xde\x9b\x37\xbf\xdf\xfb\x7e\xbf\xef\xbd\xe1\x8d\x02\x78\x7c\x0f\xe0\xe0\xc0\x6d\x49\xdd\x98\x05\x3f\xf0\xa0\x3a\xe6\x6d\xbe\x7a\xe4\xe9\xf4\x87\xfb\xbf\xff\x29\xfe\xff\xb3\x87\x77\x1f\x76\x13\x3d\x74\xe3\x5f\x7c\x4c\xe4\x8e\xb3\x87\xfe\x7f\x62\x55\xef\x47\xbf\x3d\xc4\x73\x92\xf4\xe1\x08\xc1\x78\x4c\xe5\x76\xbc\x8c\xec\xf6\xa5\x45\x29\xed\x25\x91\x29\xc4\xb3\xf9\x4d\x19\x52\x0c\xd1\xcf\x7f\xfb\xa5\xc5\x91\xb4\x13\x13\x81\xab\x75\x47\xec\x95\x73\x0c\xd7\xf7\xc6\x3c\x09\xaa\x58\x94\xa9\x63\x52\x21\xc7\x12\xf3\xc0\x30\x2b\x84\x70\x8c\x7e\xa5\x64\x06\xfc\x14\x8d\x8a\x66\xeb\xa2\xde\xd4\xcf\xf2\x8f\xa6\x9d\xea\xf0\x4f\xbf\xe9\xf0\xfb\xce\xf1\x4b\xf9\x41\x4f\x11\x83\x0a\x1a\x36\x3a\x22\x3a\x4d\x74\x60\x14\xc8\x02\x8f\xb7\xb7\xc1\xe9\xa7\xda\xb3\x5e\x04\x46\x80\x3e\xc7\xc7\xc2\xf7\x31\x2f\x90\xa8\x4e\x36\xd6\x75\x7f\x9c\x78\x4c\x4d\x54\xad\x72\xdd\xac\xe4\x96\xe6\xd5\xb3\xb6\x9e\xa4\x7b\x29\x7e\x04\xfc\xac\x62\x63\x63\x60\x11\x23\x48\x90\x4a\x57\x8e\x86\x81\x81\xe8\x8e\xd7\x08\xf2\x04\x22\x22\x6a\x57\xdb\x6b\x83\x54\x7a\x2d\x6b\x98\x38\xb1\x0b\x67\xb4\xb4\x04\x24\x44\xb7\x46\x08\x33\x8e\x80\x80\x81\x49\x9d\x32\x3a\x16\x16\x05\x6c\x34\x4c\x6c\xfc\x3d\x99\x3a\x6a\xc1\xb6\x5a\x11\x0b\x1d\x13\x0b\x95\x32\x26\x1a\xaf\xb3\x81\xca\x9c\xab\x97\x70\x3d\x6a\xa8\x28\xae\x86\x46\xed\x12\x87\x22\x55\x37\xe2\xeb\x83\x41\xd8\x0d\x14\x0b\xc9\x7c\x2e\x9f\x4d\x65\x94\x64\x40\x9d\x33\x8c\x84\x66\x6b\xaa\x52\x2f\x6b\xb5\xb3\x47\xa1\x19\x86\x58\x2d\xd7\x7b\x7c\xa7\xf7\x00\x02\x14\x29\x90\x24\x4f\x8e\x3c\x59\x52\x64\x50\x48\x12\xb8\x03\xfb\x7c\x1f\x77\x0f\x56\x5a\xd7\xd2\x6e\xa9\x3d\x36\x56\x6b\xb6\x24\xcb\x91\x4e\xfc\xd9\x9f\x7e\x6c\x9c\x7e\xf6\xa9\xf2\xe5\x5f\xc7\x5b\x95\xcd\x7a\xf1\x83\xad\x83\x97\xbe\xfb\xf5\xef\x47\xbe\x7e\xeb\xca\x72\x63\xf2\xb5\xbe\xcb\xe2\x2f\x78\x60\x08\x76\xb7\x01\xb9\x90\x2b\xfc\xf1\x76\x29\xf5\xad\x12\x8d\x7f\x73\xed\xd1\xf7\x9e\x7e\x7f\xed\x87\x06\xd0\xef\x08\x4d\x00\x41\xa0\x80\x80\x8c\xc0\x14\x02\x21\xf7\x29\x4c\x18\x89\x69\xc2\x44\x91\x09\x11\x21\x84\x40\x04\xc9\x2d\x51\x37\x12\x61\xda\xcd\x95\x89\x10\x25\x44\x14\x89\x90\x5b\x66\xdc\xb7\x4e\xa6\x7c\x6b\xd1\xeb\x6d\x33\xc5\x67\x94\x9d\x8d\x9d\x99\x85\x4f\x0e\x4f\x8e\x84\x93\x5f\x4e\x97\x81\x81\x8e\x99\xa7\xa0\x7d\x8b\x8a\x58\x34\x58\xa7\x8a\x89\x89\x4e\x0d\xf1\x82\x7b\xac\xf7\xaf\xa7\x85\x99\xb6\xe8\x17\x8f\xad\x25\x3e\xdf\x36\xd2\x7b\xe9\x59\xf1\xe3\xe7\x9b\xef\x8c\x03\xab\x4e\x42\xda\x39\x8a\x37\x16\xd2\xad\xf4\xdc\xc4\xf9\xa3\xba\x19\x00\x00\xff\xff\x09\xc9\x9e\x04\x99\x07\x00\x00")

func discordptbLnkBytes() ([]byte, error) {
	return bindataRead(
		_discordptbLnk,
		"DiscordPTB.lnk",
	)
}

func discordptbLnk() (*asset, error) {
	bytes, err := discordptbLnkBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "DiscordPTB.lnk", size: 1945, mode: os.FileMode(0666), modTime: time.Unix(1540371719, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x1, 0x33, 0x71, 0xa5, 0xf9, 0xda, 0xd5, 0x2b, 0x18, 0xa6, 0xdf, 0x20, 0xdc, 0xbb, 0x36, 0x60, 0xca, 0x5b, 0xe0, 0x90, 0xba, 0x5d, 0x8a, 0xc0, 0x8f, 0x55, 0x91, 0xa6, 0xc9, 0xd5, 0xf3, 0xdb}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"DiscordPTB.lnk": discordptbLnk,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"DiscordPTB.lnk": {discordptbLnk, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
